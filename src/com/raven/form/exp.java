/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;
import raven.cell.TableActionCellRender;
import raven.cell.TableCellEditor;
import raven.cell.tableactionevent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
//import com.raven.form.lorddata;
import com.raven.main.Main;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author Asus
 */
public class exp extends javax.swing.JPanel {

    /**
     * Creates new form exp
     */
    public exp() {
        initComponents();
         DefaultTableModel model = getDataFromDatabase();
        jTable1.setModel(model);
        
        getDataFromDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(136, 151, 170));

        jPanel1.setBackground(new java.awt.Color(136, 151, 170));

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "TIN Number", "Company Name", "Status", "View"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jTable1.setSelectionBackground(new java.awt.Color(0, 102, 255));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 102, 51));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Search");

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(491, 491, 491)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1388, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 54, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRow = jTable1.getSelectedRow();

        // Make sure a row is selected
        if (selectedRow != -1) {
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/tinvat", "tinvat", "123456")) {
                // Prepare the SQL query to select all columns for the selected row
                String sql = "SELECT * FROM company WHERE tinnumber = ?"; // Assuming you have a column named 'row_id' as a primary key

                try (PreparedStatement statement = connection.prepareStatement(sql)) {
                    // Set the value of the row_id parameter in the WHERE clause
                    statement.setInt(1, selectedRow + 1); // Assuming your row_id starts from 1, adjust as needed

                    // Execute the query and get the result set
                    try (ResultSet resultSet = statement.executeQuery()) {
                        // Iterate through the result set and print or use the data as needed
                        while (resultSet.next()) {
                            // Retrieve data from each column
                            String tinnumber = resultSet.getString("tinnumber");
                            String companyName = resultSet.getString("companyname");
                            // ... repeat for other columns

                            // Now you can use the retrieved data as needed
                            //System.out.println("TIN Number: " + tinnumber);
                            //System.out.println("Company Name: " + companyName);
                            // ... repeat for other columns
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace(); // Handle exceptions appropriately
            }

        }
    }//GEN-LAST:event_jTable1MouseClicked
private DefaultTableModel getDataFromDatabase() {
        DefaultTableModel model = new DefaultTableModel();

try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/tinvat", "tinvat", "123456")) {
    String selectSql = "SELECT id, tinnumber, companyname, status, expirdate FROM company WHERE expirdate < CURDATE() AND status = 'inactive'";

    String updateSql = "UPDATE company SET status = 'inactive' WHERE id = ?";

    try (PreparedStatement selectStatement = connection.prepareStatement(selectSql);
         ResultSet resultSet = selectStatement.executeQuery()) {

        // Add columns to the model
        model.addColumn("ID");
        model.addColumn("TIN Number");
        model.addColumn("Company Name");
        model.addColumn("Status");
        model.addColumn("Valid Date");

        // Add rows to the model and update status to 'inactive'
        while (resultSet.next()) {
            Object[] row = {
                    resultSet.getInt("id"),
                    resultSet.getString("tinnumber"),
                    resultSet.getString("companyname"),
                    resultSet.getString("status"),
                    resultSet.getString("expirdate")
            };
            model.addRow(row);

            // Update status to 'inactive' for the current record
            int companyId = resultSet.getInt("id");
            try (PreparedStatement updateStatement = connection.prepareStatement(updateSql)) {
                updateStatement.setInt(1, companyId);
                updateStatement.executeUpdate();
            }
        }
    }
} catch (SQLException e) {
    e.printStackTrace();
}

return model;
}

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String searchString = jTextField1.getText();
        search(searchString);
    }//GEN-LAST:event_jTextField1KeyReleased
 DefaultTableModel model = null;
    public void search(String str){
            model = (DefaultTableModel) jTable1.getModel();
            TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
            jTable1.setRowSorter(trs);
            trs.setRowFilter(RowFilter.regexFilter(str));
    }  
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Get the selected row index
        int selectedRowIndex = jTable1.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Display a confirmation dialog
            int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this row?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (dialogResult == JOptionPane.YES_OPTION) {
                try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/tinvat", "tinvat", "123456")) {
                    // Get the TIN number from the selected row
                    String tinNumber = jTable1.getValueAt(selectedRowIndex, 1).toString();

                    // Prepare the SQL query to delete the row based on TIN number
                    String sql = "DELETE FROM company WHERE tinnumber = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                        preparedStatement.setString(1, tinNumber);

                        // Execute the DELETE query
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Row deleted successfully
                            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                            model.removeRow(selectedRowIndex);
                            JOptionPane.showMessageDialog(this, "Row deleted successfully", "Deletion Success", JOptionPane.INFORMATION_MESSAGE);
                             jTextField1.setText("");
                        } else {
                            // Display a message if no rows were deleted
                            JOptionPane.showMessageDialog(this, "No rows deleted", "Deletion Failed", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace(); // Handle the exception appropriately
                }
            }
        } else {
            // Display a message if no row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
